# generated by datamodel-codegen:
#   filename:  Prices.schema.json
#   timestamp: 2024-05-14T11:09:59+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Extra, Field, constr


class Throttle(BaseModel):
    rateLimit: int = Field(
        ..., description='The number of requests allowed per second.'
    )
    burstLimit: int = Field(
        ..., description='The number of requests allowed in a burst.'
    )


class Overuse(BaseModel):
    class Config:
        extra = Extra.forbid

    price: float = Field(..., description='The price of the overuse fee.')
    currency: str = Field(..., description='The currency of the overuse fee.')


class Period(Enum):
    DAY = 'DAY'
    MONTH = 'MONTH'


class Quota(BaseModel):
    class Config:
        extra = Extra.forbid

    limit: int = Field(..., description='The limit of the quota.')
    offset: int = Field(
        ..., description='The number of days or months the quota is offset by.'
    )
    period: Period = Field(..., description='The period the quota is measured over.')


class Price(BaseModel):
    class Config:
        extra = Extra.forbid

    requestCount: int = Field(
        ..., description='The number of requests allowed in the interval.'
    )
    throttle: Throttle = Field(..., description='The rate limit for the pricing tier.')
    free: Optional[bool] = Field(
        None, description='Whether the pricing tier is free or not.'
    )
    dimension: Optional[str] = Field(
        None, description='The dimension of the pricing tier.'
    )
    title: Optional[str] = Field(None, description='The title of the pricing tier.')
    price: Optional[float] = Field(None, description='The price of the pricing tier.')
    currency: Optional[str] = Field(
        None, description='The currency of the pricing tier.'
    )
    interval: Optional[str] = Field(
        None, description='The interval the pricing tier is billed at.'
    )
    overuse: Optional[Overuse] = Field(
        None, description='The overuse fee for the pricing tier.'
    )
    quota: Optional[Quota] = Field(
        None, description='The quota that applies to the pricing tier.'
    )


class Prices(BaseModel):
    __root__: Dict[constr(regex=r'^.*$'), List[Price]] = Field(
        ...,
        description='Lists of publicly available pricing tiers by product.',
        title='Prices',
    )
