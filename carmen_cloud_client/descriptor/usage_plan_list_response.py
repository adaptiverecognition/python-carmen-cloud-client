# generated by datamodel-codegen:
#   filename:  UsagePlanListResponse.schema.json
#   timestamp: 2024-05-14T11:09:58+00:00

from __future__ import annotations

from enum import Enum
from typing import List

from pydantic import BaseModel, Field


class ApiStages(BaseModel):
    apiId: str = Field(..., description='The ID of the API.', title='API ID')
    stage: str = Field(
        ..., description='The friendly identifier of the stage.', title='API Stage'
    )


class Period(Enum):
    DAY = 'DAY'
    MONTH = 'MONTH'


class Quota(BaseModel):
    limit: float = Field(
        ..., description='The maximum number of requests in one period.', title='Limit'
    )
    offset: float = Field(
        ...,
        description='When the quota window starts inside a calendar period (e.g. if `offset` is 10 and `period` is `MONTH`, counting requests restarts on the 10th of every calendar month).',
        title='Offset',
    )
    period: Period = Field(
        ..., description='The calendar period the quota applies to.', title='Period'
    )


class Throttle(BaseModel):
    rateLimit: float = Field(
        ..., description='The maximum rate (requests/second).', title='Rate Limit'
    )
    burstLimit: float = Field(
        ...,
        description='The maximum number of concurrent requests.',
        title='Burst Limit',
    )


class UsagePlan(BaseModel):
    id: str = Field(
        ..., description='The unique identifier of the usage plan.', title='ID'
    )
    name: str = Field(..., description='The name of the usage plan.', title='Name')
    description: str = Field(
        ..., description='The description of the usage plan.', title='Description'
    )
    apis: List[str] = Field(
        ...,
        description='The friendly identifiers of the APIs this usage plan applies to.',
        title='APIs',
    )
    apiStages: ApiStages = Field(
        ...,
        description='The API stages this usage plan applies to.',
        title='API Stages',
    )
    quota: Quota = Field(
        ...,
        description='The number of requests included in this usage plan.',
        title='Quota',
    )
    throttle: Throttle = Field(
        ...,
        description='Request rate and conncurrency limits that apply for this Usage Plan.',
        title='Throttle',
    )
    autoSignup: bool = Field(
        ..., description='Tor internal use only.', title='Auto Sign-Up'
    )
    dimensions: List[str] = Field(
        ...,
        description='The paid subscription dimensions this usage plan applies to.',
        title='Dimensions',
    )
    stripeProductCode: str = Field(
        ..., description='For internal use only.', title='Stripe Product Code'
    )
    marketplaceProductCode: str = Field(
        ..., description='For internal use only.', title='Marketplace Product Code'
    )
    enabled: bool = Field(..., description='For internal use only.', title='Enabled')
    paid: bool = Field(
        ...,
        description='Indicates whether this usage plan applies to one or more paid subscription dimenions or the free tier.',
        title='Paid',
    )


class UsagePlans(BaseModel):
    __root__: List[UsagePlan] = Field(
        ..., description='List of Usage Plans.', title='Usage Plans'
    )
